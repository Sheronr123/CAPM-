import numpy as np
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import scipy.optimize as optimization
from yfinance import download

class CAPM():
    def __init__(self, stocks, start_date, end_date):
        self.data = None
        self.stocks = stocks
        self.start_date = start_date
        self.end_date = end_date

    def download_data(self):
        data = {}

        for stock in self.stocks:
            ticker = yf.download(stock, self.start_date, self.end_date)
            data[stock] = ticker['Adj Close']

        return pd.DataFrame(data)

    def calculate_beta(self):
        cov_matrix = np.cov(self.data['s_returns'], self.data['m_returns'])
        beta = cov_matrix[0,1]/ cov_matrix[1,1]
        print(f'The beta is equal to:{beta}')

        def regression(self):
            beta,alpha = np.polyfit(self.data['m_returns'], self.data['s_returns'], deg = 2)
            expected_return = 0.05 + beta*(self.data['m_returns'].mean()* 12 -0.05)

    def initialize(self):
        stock_data = self.download_data()
        stock_data = stock_data.resample('M').last()
        print(stock_data)
        self.data = pd.DataFrame({'s_adjclose':stock_data[self.stocks[0]], 'm_adjclose': stock_data[self.stocks[1]]})
        print(self.data)
        self.data[['s_adjclose','m_adjclose']] = np.log(self.data[['s_adjclose','m_adjclose']]/ self.data[['s_adjclose','m_adjclose']].shift(1))

        self.data = self.data[1:]
        print(self.data)

if __name__ == '__main__':
    capm = CAPM(['IBM','^GSPC'],'2010-01-01','2017-01-01')
    capm.initialize()
